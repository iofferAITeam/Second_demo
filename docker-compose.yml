services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: ioffer-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ioffer_db}
      POSTGRES_USER: ${POSTGRES_USER:-ioffer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ioffer_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ioffer_user} -d ${POSTGRES_DB:-ioffer_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB 数据库
  mongodb:
    image: mongo:7
    container_name: ioffer-mongodb
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  # 数据库管理界面
  adminer:
    image: adminer:4.8.1
    container_name: ioffer-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
      - mongodb
    restart: unless-stopped

  # AI 服务 (Python FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: ioffer-ai-service
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyBFV9S68_FMSjqx6rEqduhrgEzH4YLSzZs}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-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}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-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}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - SQL_DATABASE_URI=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - DATABASE_HOST=mongodb://mongodb:27017
      - MONGODB_URI=mongodb://mongodb:27017
      - AI_SERVICE_API_KEY=${AI_SERVICE_API_KEY:-c38eaa1a4d9a6225c38eaa1a4d9a6225ea77b81dd0887e097d3c27b07139f60c584d3bf1ec8d5b0dea77b81dd0887e097d3c27b07139f60c584d3bf1ec8d5b0d}
    ports:
      - "${AI_SERVICE_PORT:-5555}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./ai-service:/app
      - ./ai-service/data/chromadb:/app/data/chromadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务 (Node.js Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ioffer-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - JWT_SECRET=${JWT_SECRET:-MFiWT8JxJh/X81vPGkq4O2sY+okSd9hf9tBM/MQO0oo3f06cgdo+HrHpoXhTaudK4JAtsDFnRpQWvMz4DZ04Kw==}
      - PORT=${BACKEND_PORT:-8001}
      - NODE_ENV=${NODE_ENV:-development}
      - AI_SERVICE_URL=http://ai-service:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-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}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyBFV9S68_FMSjqx6rEqduhrgEzH4YLSzZs}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-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}
      - AI_SERVICE_API_KEY=${AI_SERVICE_API_KEY:-c38eaa1a4d9a6225c38eaa1a4d9a6225ea77b81dd0887e097d3c27b07139f60c584d3bf1ec8d5b0dea77b81dd0887e097d3c27b07139f60c584d3bf1ec8d5b0d}
    ports:
      - "${BACKEND_PORT:-8001}:8001"
    depends_on:
      postgres:
        condition: service_healthy
      ai-service:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules

  # 前端服务 (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ioffer-frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-College Recommendation System}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3005}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local