services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: ioffer-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ioffer_db}
      POSTGRES_USER: ${POSTGRES_USER:-ioffer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ioffer_password_prod_2024}
    ports:
      - "5432:5432"
    volumes:
      - ioffer_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ioffer_user} -d ${POSTGRES_DB:-ioffer_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB 数据库
  mongodb:
    image: mongo:7
    container_name: ioffer-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  # AI 服务 (Python FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: ioffer-ai-service
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password_prod_2024}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - SQL_DATABASE_URI=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password_prod_2024}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - DATABASE_HOST=mongodb://mongodb:27017
      - MONGODB_URI=mongodb://mongodb:27017
    ports:
      - "5555:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务 (Node.js Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ioffer-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ioffer_user}:${POSTGRES_PASSWORD:-ioffer_password_prod_2024}@postgres:5432/${POSTGRES_DB:-ioffer_db}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8001
      - NODE_ENV=production
      - AI_SERVICE_URL=http://ai-service:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      ai-service:
        condition: service_started
    restart: unless-stopped

  # 前端服务 (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ioffer-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://ec2-3-145-150-161.us-east-2.compute.amazonaws.com:8001
      - NEXT_PUBLIC_APP_NAME=iOffer College Recommendation System
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
    ports:
      - "3005:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  ioffer_postgres_data:
  mongodb_data: