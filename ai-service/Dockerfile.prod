# Multi-stage build for production
FROM python:3.12-slim AS base

# Install system dependencies (including ChromaDB requirements)
RUN apt-get update && apt-get install -y \
  build-essential \
  libomp-dev \
  libgomp1 \
  curl \
  wget \
  sqlite3 \
  libsqlite3-dev \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# Production build stage
FROM base AS builder
WORKDIR /app

# Install uv for faster dependency management
RUN pip install --no-cache-dir uv

# Copy dependency files
COPY pyproject.toml uv.lock* ./

# Install dependencies (production only)
RUN uv sync --no-dev --locked

# Final production image
FROM base AS runner
WORKDIR /app

# Set production environment
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV OMP_NUM_THREADS=4

# Create app user
RUN groupadd --gid 1001 appuser && \
  useradd --uid 1001 --gid appuser --shell /bin/bash --create-home appuser

# Copy Python environment from builder
COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Add virtual environment to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY --chown=appuser:appuser . .

# Install uv in production image for running commands
RUN pip install --no-cache-dir uv

# Prepare RAG setup scripts and directories
RUN chmod +x run_rag_setup.sh && \
  chmod +x run_langchain_rag_setup_docker.sh && \
  mkdir -p data logs uploads && \
  chown -R appuser:appuser data logs uploads

# Copy and setup entrypoint script
COPY --chown=appuser:appuser docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Start the application with RAG initialization
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["uv", "run", "python", "api_server.py"]