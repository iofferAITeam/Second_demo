generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applications {
  id          String             @id
  userId      String
  schoolId    String
  programId   String?
  status      ApplicationStatus  @default(DRAFT)
  deadline    DateTime?
  documents   Json?
  result      ApplicationResult?
  resultDate  DateTime?
  resultNotes String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime
  programs    programs?          @relation(fields: [programId], references: [id])
  schools     schools            @relation(fields: [schoolId], references: [id])
  users       users              @relation(fields: [userId], references: [id])
  essays      essays[]
}

model chat_messages {
  id            String         @id
  sessionId     String?
  userId        String
  content       String
  type          MessageType
  metadata      Json?
  createdAt     DateTime       @default(now())
  chat_sessions chat_sessions? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  users         users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model chat_sessions {
  id                String          @id
  userId            String
  title             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  chat_messages     chat_messages[]
  ai_recommendations ai_recommendations[]
  users             users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model essays {
  id            String        @id
  userId        String
  applicationId String?
  title         String
  type          EssayType
  prompt        String?
  content       String
  isAIGenerated Boolean       @default(false)
  aiPrompt      String?
  version       Int           @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  applications  applications? @relation(fields: [applicationId], references: [id])
  users         users         @relation(fields: [userId], references: [id])
}

model programs {
  id           String         @id
  schoolId     String
  name         String
  degree       String
  field        String
  duration     Int?
  tuition      Float?
  currency     String         @default("USD")
  description  String?
  requirements Json?
  deadlines    Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  applications applications[]
  schools      schools        @relation(fields: [schoolId], references: [id])
}

model schools {
  id           String         @id
  name         String
  country      String
  city         String?
  ranking      Int?
  website      String?
  logo         String?
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  applications applications[]
  programs     programs[]
}

model user_profiles {
  id               String    @id
  userId           String    @unique

  // 基础信息
  phone            String?
  wechat           String?
  birthDate        DateTime?
  nationality      String?
  visaRequired     Boolean? @default(false)
  mbti             String?
  extracurricular  String?
  personalStrengths String?
  hobbies          String?

  // 学术背景
  currentEducation String?
  gpa              Float?
  majorGpa         Float?
  major            String?
  graduationDate   DateTime?
  undergraduateUniversity String?
  universityRank   Int?
  universityType   String?  // 'overseas', '985_211', 'regular', 'unknown'
  highSchoolName   String?
  graduationYear   String?
  researchExperience String?
  publications     String?

  // 语言测试和标准化测试 (Frontend Form Fields)
  languageTestType     String?
  languageTestScore    String?
  languageTestDate     String?
  languageTestsData    Json?    // Array of LanguageTestData objects
  standardizedTestType String?
  standardizedTestScore String?
  standardizedTestDate String?
  standardizedTestsData Json?  // Array of StandardizedTestData objects

  // 经历背景 (JSON Arrays)
  workExperiences  Json?    // Array of work experience objects
  internshipExperiences Json? // Array of internship objects
  researchProjects Json?    // Array of research project objects
  extracurricularActivities Json? // Array of activity objects
  awards           Json?    // Array of award objects
  experiences      Json?    // 保持向后兼容

  // 推荐信信息 (JSON)
  recommendationLetters Json? // Array of recommendation letter objects

  // 技能相关 (JSON Arrays)
  programmingSkills Json?   // Array of programming skills
  languageSkills   Json?    // Array of language proficiency objects

  // 申请相关
  targetDegreeType String?  // 'undergraduate', 'masters', 'phd'
  targetMajors     Json?    // Array of target majors
  targetCountries  Json?    // Array of target countries
  applicationYear  String?
  applicationTerm  String?  // 'fall', 'spring', 'summer'
  intendedDegree   String?  // Alias for targetDegreeType
  intendedIntakeTerm String? // Alias for applicationTerm
  intendedMajor    String?  // Single major (from targetMajors array)
  intendedCountries Json?   // Alias for targetCountries
  intendedBudgets  String?  // Alias for budgetRange
  scholarshipRequirements String?
  otherPreference  String?
  internshipExperience String?
  volunteerExperience String?

  // 个人发展
  goals            String?
  careerGoals      String?
  personalStatement String?
  researchInterests Json?   // Array of research interest areas

  // 财务与生活偏好
  budgetRange      String?
  scholarshipNeeds Boolean? @default(false)
  preferredCityType String? // 'urban', 'suburban', 'rural', 'any'
  climatePreference String?
  campusSize       String?  // 'small', 'medium', 'large', 'any'

  // 推荐模型特征标签 (自动计算)
  gpaTag           Float?   // GPA等级标签
  paperTag         Float?   // 论文标签
  toeflTag         Float?   // 语言成绩标签
  greTag           Float?   // GRE标签
  researchTag      Float?   // 科研经历标签
  collegeTypeTag   Float?   // 院校类型标签
  recommendationTag Float?  // 推荐信质量标签
  networkingTag    Float?   // 套磁标签

  // 计算的特征值
  hasResearchExperience Boolean? @default(false)
  publicationCount Int?     @default(0)
  totalWorkMonths  Int?     @default(0)
  leadershipScore  Float?   @default(0.0)
  averageGPA       Float?   // 标准化后的GPA (4.0制)

  // 系统字段
  lastSyncAt       DateTime?
  syncStatus       String?  @default("pending") // 'synced', 'pending', 'error'
  syncErrors       Json?    // 同步错误记录
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  users            users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                    String          @id
  email                 String          @unique
  name                  String
  password              String
  avatar                String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime
  language              String          @default("zh")
  notifications         Boolean         @default(true)
  theme                 String          @default("light")
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  applications          applications[]
  chat_messages         chat_messages[]
  chat_sessions         chat_sessions[]
  essays                essays[]
  user_profiles         user_profiles?
  application_history   user_application_history[]
  ai_recommendations    ai_recommendations[]
}

enum ApplicationResult {
  ACCEPTED
  REJECTED
  WAITLISTED
  DEFERRED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  INTERVIEW
  WAITLISTED
  ACCEPTED
  REJECTED
  DEFERRED
}

enum EssayType {
  PERSONAL_STATEMENT
  STATEMENT_OF_PURPOSE
  SUPPLEMENTAL_ESSAY
  RECOMMENDATION_LETTER
  COVER_LETTER
  OTHER
}

enum MessageType {
  USER
  ASSISTANT
  SYSTEM
}

// 用户申请历史追踪
model user_application_history {
  id               String    @id @default(uuid())
  userId           String
  schoolName       String
  programName      String
  applicationYear  String
  result           String    // 'accepted', 'rejected', 'waitlisted', 'pending'
  resultDate       DateTime?
  profileSnapshot  Json      // 申请时的用户资料快照
  predictionScore  Float?    // 当时的模型预测分数
  actualFeatures   Json?     // 实际使用的模型特征
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  users            users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([applicationYear])
}

// AI推荐记录表
model ai_recommendations {
  id                String    @id @default(uuid())
  userId            String
  sessionId         String?   // 关联聊天会话

  // 查询相关
  originalQuery     String    // 用户原始查询
  queryType         String    @default("school_recommendation") // 查询类型

  // AI响应数据
  aiResponse        String    // 完整AI回复内容
  teamUsed          String?   // 使用的AI团队
  confidence        Float?    // AI置信度
  thinkingProcess   String?   // AI思考过程
  strategy          String?   // AI策略
  source            String?   // 数据来源

  // 推荐结果结构化数据
  recommendedSchools Json     // 推荐学校列表 [{name, scores, analysis, etc}]
  totalSchools      Int       @default(0)

  // 用户资料快照 (推荐时的用户状态)
  userProfileSnapshot Json?   // 推荐生成时的用户资料

  // 推荐质量评估
  relevanceScore    Float?    // 推荐相关性评分
  isActive          Boolean   @default(true) // 是否为有效推荐

  // 时间戳
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())

  // 关联
  users             users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat_sessions     chat_sessions? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  recommendation_schools ai_recommendation_schools[]

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([queryType])
}

// AI推荐学校详情表
model ai_recommendation_schools {
  id                   String    @id @default(uuid())
  recommendationId     String    // 关联ai_recommendations

  // 学校基本信息
  schoolName           String
  programName          String    @default("Master of Science in Computer Science")

  // AI评分数据
  academicScore        Float?    // 学术背景评分 (0-5)
  practicalScore       Float?    // 实践经验评分 (0-5)
  languageScore        Float?    // 语言能力评分 (0-5)
  fitScore             Float?    // 整体匹配度评分 (0-5)

  // 分析内容
  strategistNote       String?   // 策略师建议
  analysisContent      String?   // 详细分析内容

  // 学校详细信息 (从AI解析或数据库匹配)
  location            String?
  tuition             String?
  duration            String?
  toeflRequirement    String?
  admissionRate       String?

  // 分类
  category            String    @default("fit") // target, fit, safety
  schoolType          String    @default("Regular") // One Click Apply, iOffer Cooperation, Regular

  // 排序和显示
  displayOrder        Int       @default(0)
  isHighlighted       Boolean   @default(false)

  // 时间戳
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())

  // 关联
  ai_recommendations  ai_recommendations @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@index([recommendationId])
  @@index([category])
  @@index([fitScore])
}
